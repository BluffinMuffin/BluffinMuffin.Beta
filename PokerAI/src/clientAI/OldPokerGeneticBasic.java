package clientAI;

import gameLogic.GameCard;

import java.util.ArrayList;

import pokerLogic.OldPokerPlayerAction;
import pokerLogic.OldTypePlayerAction;
import pokerStats.MonteCarlo;

/**
 * @author Hocus
 *         This Poker AI use the same algorithm as the pokerBasic AI
 *         but with different parameters. The parameters were generated
 *         by a genetic algorithm.
 */

public class OldPokerGeneticBasic extends OldPokerAI
{
    private final static int NB_SIMULATIONS = 10000;
    
    // The ADN Generated by a genetic algorithm
    private final double[] m_adn = new double[] { 0.6, 0.3266700514469202, 0.22182060907102807, 0.25, 0.08723920632011439, 0.2362120951148745 };
    
    // Second working ADN: {0.6, 0.21131060545158453, 0.37403662092474566,
    // 0.6975896343117947, 0.8464545870554965, 0.26968160234329386};
    
    public OldPokerGeneticBasic()
    {
    }
    
    @Override
    protected OldPokerPlayerAction analyze(ArrayList<OldTypePlayerAction> p_actionsAllowed, int p_minRaiseAmount, int p_maxRaiseAmount)
    {
        final GameCard[] myCards = m_table.m_localPlayer.getHand();
        final GameCard[] myBoardCards = m_table.m_boardCards.toArray(new GameCard[m_table.m_boardCards.size()]);
        
        System.out.println("Calculating MonteCarlo score...");
        
        if ((myCards[0] == null) || (myCards[1] == null))
        {
            System.err.println("Watch IT!!! Cannot take decision if I don't hava any cards.");
            return super.analyze(p_actionsAllowed, p_minRaiseAmount, p_maxRaiseAmount);
        }
        
        final double score = MonteCarlo.CalculateWinRatio(myCards, myBoardCards, m_table.m_nbRemainingPlayers, OldPokerGeneticBasic.NB_SIMULATIONS).m_winRatio;
        
        System.out.println("Analyzing " + score);
        final double x = m_table.m_nbRemainingPlayers;
        final double threshold1 = Math.sqrt(m_adn[0] * (1.0 / (x - m_adn[1]))) + m_adn[2];
        final double threshold2 = Math.sqrt(1.0 / (m_adn[3] * (x + (1 / m_adn[4])))) - m_adn[5];
        
        if ((score >= threshold1) && p_actionsAllowed.contains(OldTypePlayerAction.RAISE))
        {
            return new OldPokerPlayerAction(OldTypePlayerAction.RAISE, Math.min(p_minRaiseAmount + m_table.m_smallBlindAmount, p_maxRaiseAmount));
        }
        else if ((score >= threshold2) && p_actionsAllowed.contains(OldTypePlayerAction.CALL))
        {
            return new OldPokerPlayerAction(OldTypePlayerAction.CALL);
        }
        else
        {
            if (p_actionsAllowed.contains(OldTypePlayerAction.CHECK))
            {
                return new OldPokerPlayerAction(OldTypePlayerAction.CHECK);
            }
            else
            {
                return new OldPokerPlayerAction(OldTypePlayerAction.FOLD);
            }
        }
    }
    
    @Override
    public String toString()
    {
        return "Poker Basic AI";
    }
}
